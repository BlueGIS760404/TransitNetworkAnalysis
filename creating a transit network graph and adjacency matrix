from pathlib import Path
import geopandas as gpd
import networkx as nx
import pandas as pd
import warnings
warnings.simplefilter("ignore")

# Create a network graph from transit lines and stations
def create_transit_network(lines_gdf: gpd.GeoDataFrame, # GeoDataFrame containing transit lines (LineString geometries)
                         stations_gdf: gpd.GeoDataFrame, # GeoDataFrame containing stations (Point geometries)
                         buffer_distance: int = 50, # Distance in meters to search for stations near lines
                         line_id_col: str = 'Origin', # Column name containing line identifiers
                         station_id_col: str = 'Name') -> nx.Graph: # Column name containing station identifiers
    
    G = nx.Graph() # NetworkX graph representing the transit network
    
    # Add all stations as nodes
    for _, station in stations_gdf.iterrows():
        G.add_node(station[station_id_col],
                  name=station[station_id_col],
                  geometry=station['geometry'])
    
    # Process each line
    processed_lines = 0
    skipped_lines = 0
    for _, line in lines_gdf.iterrows():
        line_geom = line['geometry']
        current_line_id = line.get(line_id_col)
        
        # Create buffer around line
        buffered_line = line_geom.buffer(buffer_distance)
        
        # Find stations within buffer
        stations_on_line = stations_gdf[stations_gdf.geometry.within(buffered_line)].copy()
        
        if len(stations_on_line) < 2:
            skipped_lines += 1
            continue  # Skip lines with fewer than 2 stations
            
        processed_lines += 1
        
        # Calculate projection distance along line for each station
        stations_on_line['proj_dist'] = stations_on_line.geometry.apply(
            lambda x: line_geom.project(x))
        
        # Sort stations by their position along the line
        stations_sorted = stations_on_line.sort_values('proj_dist')
        
        # Add edges between consecutive stations
        station_ids = stations_sorted[station_id_col].tolist()
        for i in range(len(station_ids) - 1):
            G.add_edge(station_ids[i],
                      station_ids[i + 1],
                      line_id=current_line_id,
                      length=line_geom.project(stations_sorted.iloc[i + 1].geometry) - 
                          line_geom.project(stations_sorted.iloc[i].geometry))
    
    print(f"Processed {processed_lines} lines, skipped {skipped_lines} lines")
    return G

# Save the adjacency matrix of a network graph to a CSV file
def save_adjacency_matrix(G: nx.Graph, output_path: Path, filename: str) -> None:
    # Create adjacency matrix
    adj_matrix = nx.adjacency_matrix(G).todense()
    station_ids = list(G.nodes)
    
    print(f"Adjacency matrix shape: {adj_matrix.shape}")
    
    # Convert to DataFrame
    adj_df = pd.DataFrame(adj_matrix, 
                         index=station_ids, 
                         columns=station_ids)
    
    # Ensure output directory exists
    output_path.mkdir(parents=True, exist_ok=True)
    
    # Save to CSV
    full_path = output_path / filename
    adj_df.to_csv(full_path, encoding='utf-8-sig')
    print(f"Adjacency matrix saved to {full_path}")

# Main execution
if __name__ == "__main__":
    # Set paths
    data_path = r"E:\Freelancing\P_01_6.4.2025\data\gis"
    output_path = Path(r"E:\Freelancing\P_01_6.4.2025\output")
    
    # Reading data
    try:
        metro_lines = gpd.read_file(f'{data_path}/metro_lines.shp')
        metro_stations = gpd.read_file(f'{data_path}/metro_stations.shp')
        brt_lines = gpd.read_file(f'{data_path}/brt_lines.shp')
        brt_stations = gpd.read_file(f'{data_path}/brt_stations.shp')
        traffic_zones = gpd.read_file(f'{data_path}/traffic_zones_utm.shp')
    except Exception as e:
        print(f"Error reading shapefiles: {e}")
        exit()

    # Define station_id_col
    station_id_col = 'Name'

    # Check for station_id_col in stations
    for stations_gdf, name in [(metro_stations, 'Metro'), (brt_stations, 'BRT')]:
        if station_id_col not in stations_gdf.columns:
            print(f"Error: '{station_id_col}' column not found in {name} stations")
            print(f"Available columns: {stations_gdf.columns.tolist()}")
            exit()

    # Check for duplicate station names
    for stations_gdf, name in [(metro_stations, 'Metro'), (brt_stations, 'BRT')]:
        duplicate_stations = stations_gdf[stations_gdf[station_id_col].duplicated()]
        if not duplicate_stations.empty:
            print(f"Duplicate {name} station names found: {duplicate_stations[station_id_col].tolist()}")
            # Optional: Use index as unique ID
            # stations_gdf[station_id_col] = stations_gdf.index.astype(str)

    # Data validation and reporting
    print(f"\nMetro lines: {len(metro_lines)} rows")
    print(f"Metro stations: {len(metro_stations)} rows")
    print(f"Unique Metro station names: {metro_stations[station_id_col].nunique()}")
    print(f"Missing Metro station names: {metro_stations[station_id_col].isna().sum()}")
    print(f"\nBRT lines: {len(brt_lines)} rows")
    print(f"BRT stations: {len(brt_stations)} rows")
    print(f"Unique BRT station names: {brt_stations[station_id_col].nunique()}")
    print(f"Missing BRT station names: {brt_stations[station_id_col].isna().sum()}")

    print("\nMetro lines columns:", metro_lines.columns.tolist())
    print("Metro stations columns:", metro_stations.columns.tolist())
    print("BRT lines columns:", brt_lines.columns.tolist())
    print("BRT stations columns:", brt_stations.columns.tolist())

    # Geometry validation
    metro_lines = metro_lines[metro_lines.geometry.is_valid]
    metro_stations = metro_stations[metro_stations.geometry.is_valid]
    brt_lines = brt_lines[brt_lines.geometry.is_valid]
    brt_stations = brt_stations[brt_stations.geometry.is_valid]
    
    print(f"\nMetro lines after geometry check: {len(metro_lines)}")
    print(f"Metro stations after geometry check: {len(metro_stations)}")
    print(f"BRT lines after geometry check: {len(brt_lines)}")
    print(f"BRT stations after geometry check: {len(brt_stations)}")

    # CRS transformation
    metro_stations = metro_stations.to_crs(epsg=32639)
    metro_lines = metro_lines.to_crs(epsg=32639)
    brt_stations = brt_stations.to_crs(epsg=32639)
    brt_lines = brt_lines.to_crs(epsg=32639)
    traffic_zones = traffic_zones.to_crs(epsg=32639)

    # Create and save networks
    metro_network = create_transit_network(
        lines_gdf=metro_lines,
        stations_gdf=metro_stations,
        buffer_distance=50
    )
    print(f"\nNumber of nodes in Metro network: {metro_network.number_of_nodes()}")
    print(f"Number of isolated nodes in Metro network: {len(list(nx.isolates(metro_network)))}")
    save_adjacency_matrix(metro_network, output_path, "metro_adjacency_matrix.csv")

    brt_network = create_transit_network(
        lines_gdf=brt_lines,
        stations_gdf=brt_stations,
        buffer_distance=150  # Increased for BRT
    )
    print(f"\nNumber of nodes in BRT network: {brt_network.number_of_nodes()}")
    print(f"Number of isolated nodes in BRT network: {len(list(nx.isolates(brt_network)))}")
    save_adjacency_matrix(brt_network, output_path, "brt_adjacency_matrix.csv")
